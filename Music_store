/*   Question Set 1 - Easy*/

   /* Q1: Who is the senior most employee based on job title? */

select * from employee
	order by hire_date asc limit 1; 

select * from employee order by levels desc limit 1;


/* Q2: Which countries have the most Invoices? */

select count(*) as a , billing_country from invoice
group by billing_country
order by a desc;

/* Q3: What are top 3 values of total invoice? */

select round(total) as total from invoice
	order by total desc limit 3;

/* Q4: Which city has the best customers? We would like to throw a promotional Music Festival in the city we made the most money. 
Write a query that returns one city that has the highest sum of invoice totals. 
Return both the city name & sum of all invoice totals */

select  billing_city ,round(sum(total)) as total from invoice

group by billing_city order by total desc;


/* Q5: Who is the best customer? The customer who has spent the most money will be declared the best customer. 
Write a query that returns the person who has spent the most money.*/

select customer.customer_id, concat(customer.first_name,customer.last_name) as full_name ,round(sum(invoice.total)) as total
from customer 
join invoice on customer.customer_id = invoice.customer_id 
group by customer.customer_id
order by total desc limit 1;

/* Question Set 2 - Moderate */

/* Q1: Write query to return the email, first name, last name, & Genre of all Rock Music listeners. 
Return your list ordered alphabetically by email starting with A. */

/*Method 1 */

SELECT DISTINCT email,first_name, last_name
FROM customer
JOIN invoice ON customer.customer_id = invoice.customer_id
JOIN invoice_line ON invoice.invoice_id = invoice_line.invoice_id
WHERE track_id IN(
	SELECT track_id FROM track
	JOIN genre ON track.genre_id = genre.genre_id
	WHERE genre.name LIKE 'Rock'
)
ORDER BY email;

/* Method 2 */

SELECT DISTINCT email AS Email,concat(first_name,' ',last_name ) as full, genre.name AS Name
FROM customer
JOIN invoice ON invoice.customer_id = customer.customer_id
JOIN invoice_line ON invoice_line.invoice_id = invoice.invoice_id
JOIN track ON track.track_id = invoice_line.track_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
ORDER BY email;


/* Q2: Let's invite the artists who have written the most rock music in our dataset. 
Write a query that returns the Artist name and total track count of the top 10 rock bands. */
/* Method 1*/
select a.artist_id, a.name as ar_name , count(c.track_id) as total_track
from artist a join album b
on a.artist_id = b.artist_id
join track c on b.album_id = c.album_id
join genre d on d.genre_id = c.genre_id
where d.name like 'Rock'
group by a.artist_id
order by total_track desc limit 10;
/* method 2*/
SELECT artist.artist_id, artist.name,COUNT(artist.artist_id) AS number_of_songs
FROM track
JOIN album ON album.album_id = track.album_id
JOIN artist ON artist.artist_id = album.artist_id
JOIN genre ON genre.genre_id = track.genre_id
WHERE genre.name LIKE 'Rock'
GROUP BY artist.artist_id
ORDER BY number_of_songs DESC
LIMIT 10;


/* Q3: Return all the track names that have a song length longer than the average song length. 
Return the Name and Milliseconds for each track. Order by the song length with the longest songs listed first. */
/*Method 1*/
SELECT name,miliseconds
FROM track
WHERE miliseconds > (
	SELECT AVG(miliseconds) AS avg_track_length
	FROM track )
ORDER BY miliseconds DESC;

/*Metod 2*/
select  name ,round(avg(milliseconds)) milliseconds from track
group by name
order by milliseconds desc;





